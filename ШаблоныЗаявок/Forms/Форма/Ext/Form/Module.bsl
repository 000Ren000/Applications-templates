
#Область ОбработчикиСобытийФормы
#КонецОбласти


//////////////////////////////////////////


#Область ОбработчикиСобытийЭлементовФормы    

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработатьПодбор(ВыбранноеЗначение);  
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	ПерезаполнитьТаблицуОтбора();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с фотографией";
	Диалог.ПолноеИмяФайла = "";
	Диалог.Фильтр = "Файлы (*.json) | *.json";
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	

	
КонецПроцедуры



#КонецОбласти


//////////////////////////////////////////


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрименитьИзменения(Команда)    
	
	ПрименитьИзмененияНаСервере();
	Сообщить("Обработка завершена");
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораГруппИЭлементов", 
	ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМагазин(Команда)	
	Магазин = Элементы.Магазины.ТекущиеДанные.Значение;
	ПерезаполнитьТаблицуОтбора();
КонецПроцедуры 

&НаКлиенте
Процедура Сохранить(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);  
	Диалог.Заголовок = "Выберите файл с фотографией";
	Диалог.ПолноеИмяФайла = "";  
	Диалог.Фильтр = "Файлы (*.json) | *.json";
	Если Диалог.Выбрать() Тогда
		ПутьКФайлу = Диалог.ПолноеИмяФайла;    
		СохранитьТаблицуДанных();
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;  
	
	
КонецПроцедуры


#КонецОбласти


//////////////////////////////////////////


#Область СлужебныеПроцедурыИФункции   

&НаСервере
Функция ПрименитьИзмененияНаСервере()   
	
	Для каждого Товар Из Товары Цикл		 
		КлючЗаписи = КлючЗаписиНоменклатуры();
		ПараметрыЗаписи = ПустыеПараметрыТоварногоОграничения();
		
		//УпаковкаЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товар.Номенклатура, "ВесЕдиницаИзмерения");		
		
		ЗаполнитьПараметры(Товар, КлючЗаписи, ПараметрыЗаписи);
		
		РегистрыСведений.ТоварныеОграничения.ЗадатьУпаковкуТовара(Товар.Номенклатура,
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), КлючЗаписи.Склад, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		Попытка	
			РегистрыСведений.ТоварныеОграничения.ДобавитьПоддержаниеЗапасаРасчетПоНорме(КлючЗаписи, 
			ПараметрыЗаписи);
		Исключение
			Сообщить("Ошибка записи Номенклатуры: " + Товар.Номенклатура);
		КонецПопытки;
		
	КонецЦикла;	
КонецФункции    

&НаСервере
Процедура ЗаполнитьПараметры(Товар, КлючЗаписи, ПараметрыЗаписи)
	
	КлючЗаписи.Номенклатура = Товар.Номенклатура;
	КлючЗаписи.Склад = Магазины;
	
	ПараметрыЗаписи.НормаПотребления = Товар.НормаПотребления; 
	ПараметрыЗаписи.СтраховоеКоличествоЗапаса = Товар.СтраховойЗапас;
	ПараметрыЗаписи.ОбеспечениеЗаказовПриПоддержанииЗапаса = Перечисления.
	ОбеспечениеЗаказовПриПоддержанииЗапаса.ЗаСчетЗапасов; 
КонецПроцедуры

// Функция-конструктор структуры, описывающей параметры товарных ограничений.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			МетодОбеспеченияПотребностей			- Перечисление.МетодыОбеспеченияПотребностей.
//			МинимальноеКоличествоЗапаса				- Число.
//			МаксимальноеКоличествоЗапаса			- Число.
//			СтраховоеКоличествоЗапаса				- Число.
//			НормаПотребления						- Число.
//			ОбеспечениеЗаказовПриПоддержанииЗапаса	- Перечисление.ОбеспечениеЗаказовПриПоддержанииЗапаса.
//
Функция ПустыеПараметрыТоварногоОграничения()
	ПараметрыТоварногоОграничения = Новый Структура();
	ПараметрыТоварногоОграничения.Вставить("МетодОбеспеченияПотребностей",
	Перечисления.МетодыОбеспеченияПотребностей.ПустаяСсылка());
	ПараметрыТоварногоОграничения.Вставить("МинимальноеКоличествоЗапаса",	0);
	ПараметрыТоварногоОграничения.Вставить("МаксимальноеКоличествоЗапаса",	0);
	ПараметрыТоварногоОграничения.Вставить("СтраховоеКоличествоЗапаса",		0);
	ПараметрыТоварногоОграничения.Вставить("НормаПотребления",				0);
	ПараметрыТоварногоОграничения.Вставить("ОбеспечениеЗаказовПриПоддержанииЗапаса",
	Перечисления.ОбеспечениеЗаказовПриПоддержанииЗапаса.ПустаяСсылка());
	
	Возврат ПараметрыТоварногоОграничения;
КонецФункции

// Функция-конструктор структуры, описывающей запись номенклатуры (общая настройка для всех характеристик) в регистре.
//
// Возвращаемое значение:
//		Структура - Структура с полями:
//			ТипКлюча		- Строка - Служебный реквизит.
//			Номенклатура	- СправочникСсылка.Номенклатура.
//			Склад			- СправочникСсылка.Склады.
//
Функция КлючЗаписиНоменклатуры()
	Ключ = Новый Структура;
	Ключ.Вставить("ТипКлюча",		"ОбщаяНастройка");
	Ключ.Вставить("Номенклатура",	Справочники.ГруппировкиТоварныхОграничений.ПустаяСсылка());
	Ключ.Вставить("Склад",			Справочники.Склады.ПустаяСсылка());
	Возврат Ключ;
КонецФункции

&НаСервере
Функция ОбработатьПодбор(ВыбранноеЗначение) 
	
	ТабДанныхЗаполлнения = ПолучитьДанныеЗаполнения(ВыбранноеЗначение);
	
	Для каждого ДанныеЗаполнения Из ТабДанныхЗаполлнения Цикл
		
		Если ТаблицаДанных.НайтиСтроки(
			Новый Структура("Номенклатура, Магазин", 
			ДанныеЗаполнения.Номенклатура,
			ДанныеЗаполнения.Магазин)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТД = Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТД, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.МетодОбеспечения = Перечисления.
			МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаМинМакс Тогда 
			ТД.СколькоОтправлятьПачкой	= ДанныеЗаполнения.МаксимальноеКоличество;
			ТД.МинОст 									= ДанныеЗаполнения.МинимальноеКоличество;   
		КонецЕсли;    
		
		Если ДанныеЗаполнения.МетодОбеспечения = Перечисления.
			МетодыОбеспеченияПотребностей.ПоддержаниеЗапасаНаСрокПоНорме Тогда 
			ТД.МаксОст = ДанныеЗаполнения.СтраховоеКоличество + ДанныеЗаполнения.НормаПотребления;
			ТД.МинОст 	= ДанныеЗаполнения.СтраховоеКоличество;   
		КонецЕсли;
	КонецЦикла;
	
	
	//ТаблицаДанных.Сортировать("Магазин Возр ,Номенклатура Возр");
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаполнения(СписокНоменклатуры) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварныеОграничения.Номенклатура КАК Номенклатура,
	|	ТоварныеОграничения.Склад КАК Магазин,
	|	ТоварныеОграничения.СтраховоеКоличествоЗапаса КАК СтраховоеКоличество,
	|	ТоварныеОграничения.МинимальноеКоличествоЗапаса КАК МинимальноеКоличество,
	|	ТоварныеОграничения.МаксимальноеКоличествоЗапаса КАК МаксимальноеКоличество,
	|	ТоварныеОграничения.НормаПотребления КАК НормаПотребления,
	|	ТоварныеОграничения.МетодОбеспеченияПотребностей КАК МетодОбеспечения
	|ИЗ
	|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
	|ГДЕ
	|	ТоварныеОграничения.Склад В(&Склад)
	|	И ТоварныеОграничения.Номенклатура В ИЕРАРХИИ(&Номенклатура)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварныеОграничения.Склад,
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", СписокНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Магазин);  
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере                                 
Процедура ПерезаполнитьТаблицуОтбора()	   
	
	Товары.Очистить();                       
	
	Для каждого Строка Из ТаблицаДанных Цикл		
		Если Строка.Магазин = Магазин Тогда
			ЗаполнитьЗначенияСвойств(Товары.Добавить(), Строка);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТоварыВСклад(Команда)
	
	Если Магазины.НайтиПоЗначению(Магазин) = Неопределено Тогда
		Магазины.Добавить(Магазин);	
	КонецЕсли;
	
	ДобавитьТоварыВТаблицуДанных();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыВТаблицуДанных()
	
	Для каждого Товар Из Товары Цикл
		СуществующаяСтрока = ТаблицаДанных.НайтиСтроки(
		Новый Структура("Номенклатура, Магазин", 
		Товар.Номенклатура,
		Товар.Магазин));
		
		Если СуществующаяСтрока.Количество() > 0 Тогда
			Продолжить;  
		Иначе 
			
			Для Каждого Строка Из СуществующаяСтрока Цикл
				ЗаполнитьЗначенияСвойств(Строка, Товар);	
			КонецЦикла;
			
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Товар);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуДанных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.МинОст КАК МинОст,
	|	ТаблицаДанных.МаксОст КАК МаксОст,
	|	ТаблицаДанных.МетодОбеспечения КАК МетодОбеспечения,
	|	ТаблицаДанных.СколькоОтправлятьПачкой КАК СколькоОтправлятьПачкой,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Магазин КАК Магазин
	|ПОМЕСТИТЬ втТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанных.МинОст КАК МинОст,
	|	втТаблицаДанных.МаксОст КАК МаксОст,
	|	втТаблицаДанных.МетодОбеспечения КАК МетодОбеспечения,
	|	втТаблицаДанных.СколькоОтправлятьПачкой КАК СколькоОтправлятьПачкой,
	|	втТаблицаДанных.Номенклатура КАК Номенклатура,
	|	втТаблицаДанных.Магазин КАК Магазин
	|ИЗ
	|	втТаблицаДанных КАК втТаблицаДанных";
	
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеДляСохранения = Новый Массив;	
	Пока Выборка.Следующий() Цикл
	     Строка = Новый Структура;
			 
			 Строка.Вставить("МинОст", Выборка.МинОст);
			 Строка.Вставить("МаксОст", Выборка.МаксОст );
			 Строка.Вставить("МетодОбеспечения",Строка(Выборка.МетодОбеспечения));
			 Строка.Вставить("СколькоОтправлятьПачкой", Выборка.СколькоОтправлятьПачкой );
			 Строка.Вставить("Номенклатура", Строка(Выборка.Номенклатура));
			 Строка.Вставить("Магазин", Строка(Выборка.Магазин));
			 
			 ДанныеДляСохранения.Добавить(Строка);
	КонецЦикла;
		
	ДЖСОН = Новый ЗаписьJSON; 
	ДЖСОН.УстановитьСтроку(
		Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб));  
		
	Попытка	
		ЗаписатьJSON(ДЖСОН, ДанныеДляСохранения);	
		СтрДжсон = ДЖСОН.Закрыть();	
		
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(СтрДжсон);
		Файл.Записать(ПутьКФайлу); 
		Сообщить("Файл успешно сохранен");
	Исключение  
		Сообщить("Не удалось записать файл");
	КонецПопытки;
	
КонецПроцедуры 
#КонецОбласти






